[alias]

    # add
    a = add                           # add
    chunkyadd = add --patch           # stage commits chunk by chunk

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    # via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    # branch
    b = branch -v                     # branch (verbose)

    # merge
    mg = merge --no-ff

	# commit
    c = commit -m                     # commit with message
    ca = commit -am                   # commit all with message
    ci = commit                       # commit
    cmv = commit -v
    amend = commit --amend            # ammend your last commit
    ammend = commit --amend           # ammend your last commit

	# checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

	# cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

	# diff
    d = diff                          # diff unstaged changes
    dc = diff --cached                # diff staged changes
    last = diff HEAD^                 # diff last committed change

	# log
    l = log --graph --date=short
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    lds = log --pretty=format:'%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]' --decorate --date=short
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

	# pull
    pl = pull                         # pull

	# push
    ps = push                         # push

	# rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase

	# remote
    r = remote -v                     # show remotes (verbose)

	# reset
    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

	# stash
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)

	# status
    s = status                        # status
    st = status                       # status
    stat = status                     # status

	# tag
    t = tag -n                        # show tags with <n> lines of each tag message

	# svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit
[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[color]
	ui = 1
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green
[core]
    autocrlf = input
    quotepath = false
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
[diff]
    tool = vimdiff
[difftool "vimdiff"]
    cmd = /usr/bin/env vimdiff \"$LOCAL\" \"$REMOTE\"
[difftool]
    prompt = false
[color]
    diff = auto
[filter "lfs"]
    clean = git-lfs clean %f
    smudge = git-lfs smudge %f
    required = true
